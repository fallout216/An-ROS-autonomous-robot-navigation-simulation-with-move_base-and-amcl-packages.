<?xml version="1.0"?>
<launch>
<!-- these are the arguments you can pass this launch file, for
example paused:=true -->
<arg name="paused" default="false" />
<arg name="use_sim_time" default="true" />
<arg name="gui" default="true" />
<arg name="headless" default="false" />
<arg name="debug" default="true" />

<!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
<include file="$(find gazebo_ros)/launch/empty_world.launch">
<arg name="world_name" value="$(find smworld)/worlds/smworld.world" />
<arg name="debug" value="$(arg debug)" />
<arg name="gui" value="$(arg gui)" />
<arg name="paused" value="$(arg paused)" />
<arg name="use_sim_time" value="$(arg use_sim_time)" />
<arg name="headless" value="$(arg headless)" />
</include>

<!-- start joint state publisher -->
<node name="joint_state_publisher" pkg="joint_state_publisher"
type="joint_state_publisher" ></node>
<!-- start robot state publisher -->
<node pkg="robot_state_publisher" type="robot_state_publisher"
name="robot_state_publisher" output="screen" >
<param name="publish_frequency" type="double" value="50.0" />
</node>

<!-- Load the URDF into the ROS Parameter Server -->
<arg name="model" />
<param name="robot_description" command="$(find xacro)/xacro.py $(arg model)" />

<!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-urdf -model robot1 -param robot_description -z 0.05" />

<!-- add RViz monitor -->
<node name="rviz" pkg="rviz" type="rviz" args="-d $(find smworld)/launch/mapping.rviz"/>

<!-- add known occupancy grid map -->
<node name="map_server" pkg="map_server" type="map_server" args="$(find smworld)/maps/map.yaml" />

<!-- add gmapping -->
<node name="slam_gmapping" pkg="gmapping" type="slam_gmapping">
<remap from="scan" to="/robot/laser/scan"/>
<param name="base_link" value="base_footprint"/>
</node>
</launch>
